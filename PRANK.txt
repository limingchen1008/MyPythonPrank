import tkinter as tk
import random
import time
import threading

class PrankApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.attributes("-fullscreen", True)
        self.root.configure(bg="black")
        self.root.config(cursor="none")

        for seq in ["WM_DELETE_WINDOW", "<Alt-F4>", "<Escape>", "<Control-q>"]:
            self.root.bind_all(seq, self.disable_event)

        self.canvas = tk.Canvas(self.root, bg="black", highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)
        self.width = self.root.winfo_screenwidth()
        self.height = self.root.winfo_screenheight()

        self.messages = ["ACCESS GRANTED", "SYSTEM BREACH", "TRACE IN PROGRESS", "OVERRIDE ENABLED"]
        self.frame_count = 0
        self.blink = True

        self.root.after(10000, self.start_hacker_effect)  # 10秒後開始

    def disable_event(self, event=None):
        return "break"

    def start_hacker_effect(self):
        self.effect_duration = 20000  # 持續20秒
        self.update_hacker_effect()
        self.root.after(self.effect_duration, self.freeze_screen_then_bsod)

    def update_hacker_effect(self):
        self.canvas.delete("all")

        # Matrix綠字特效（加強版）
        for _ in range(300):
            x = random.randint(0, self.width)
            y = random.randint(0, self.height)
            size = random.randint(14, 26)
            char = random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*")
            green_value = random.randint(100, 255)
            color = f"#00{green_value:02X}00"
            self.canvas.create_text(x, y, text=char, fill=color, font=("Courier", size, "bold"))

        # 閃爍紅框效果
        # 生成隨機數量紅框 (3~7個)
        num_boxes = random.randint(3, 7)
        for _ in range(num_boxes):
            x1 = random.randint(0, self.width - 100)
            y1 = random.randint(0, self.height - 100)
            w = random.randint(50, 150)
            h = random.randint(30, 100)
            alpha = random.choice([0.3, 0.5, 0.7, 1.0])
            # 紅色帶alpha效果(因為canvas不支持alpha，改用顏色深淺)
            red_shade = int(255 * alpha)
            color = f"#{red_shade:02X}0000"
            self.canvas.create_rectangle(x1, y1, x1 + w, y1 + h, outline=color, width=3)

        # 中央紅字閃爍訊息
        if self.frame_count % 6 == 0 and self.blink:
            msg = random.choice(self.messages)
            self.canvas.create_text(self.width // 2, self.height // 2, text=msg, fill="red",
                                    font=("Arial", random.randint(50, 80), "bold"))

        self.blink = not self.blink
        self.frame_count += 1
        self.effect_job = self.root.after(60, self.update_hacker_effect)  # 60ms更新一次

    def freeze_screen_then_bsod(self):
        self.root.after_cancel(self.effect_job)
        self.flash_screen(3, 0.2)
        self.show_bsod_screen()

    def flash_screen(self, times, interval):
        for _ in range(times):
            self.root.configure(bg="white")
            self.root.update()
            time.sleep(interval)
            self.root.configure(bg="black")
            self.root.update()
            time.sleep(interval)

    def show_bsod_screen(self):
        self.canvas.pack_forget()
        self.bsod_win = tk.Toplevel(self.root)
        self.bsod_win.attributes("-fullscreen", True)
        self.bsod_win.configure(bg="#0000AA")
        for seq in ["WM_DELETE_WINDOW", "<Alt-F4>", "<Escape>"]:
            self.bsod_win.bind_all(seq, self.disable_event)

        self.remaining_seconds = 12
        self.bsod_label = tk.Label(self.bsod_win, font=("Consolas", 30),
                                   fg="white", bg="#0000AA", justify="center")
        self.bsod_label.pack(expand=True)

        self.shake_task()
        self.update_bsod_countdown()

    def shake_task(self):
        def s():
            for _ in range(15):
                dx, dy = random.randint(-20, 20), random.randint(-20, 20)
                self.bsod_win.geometry(f"+{dx}+{dy}")
                time.sleep(0.05)
            self.bsod_win.geometry("+0+0")
        threading.Thread(target=s, daemon=True).start()

    def update_bsod_countdown(self):
        if self.remaining_seconds > 0:
            self.remaining_seconds -= 1
            text = (f":(\n\n你的電腦遇到問題，需要重新啟動。\n\n"
                    f"請等待 {self.remaining_seconds} 秒後自動重啟。\n\n"
                    "若想了解更多，請搜尋此錯誤：you are GAY")
            self.bsod_label.config(text=text)
            self.bsod_win.after(1000, self.update_bsod_countdown)
        else:
            self.close_bsod_and_ask()

    def close_bsod_and_ask(self):
        self.bsod_win.destroy()
        self.ask_first_question()

    def ask_first_question(self):
        self.show_question_window("你是否覺得陳立洺好帥？", self.ask_second_question, self.show_big_red_message)

    def ask_second_question(self):
        if hasattr(self, "question_win"):
            self.question_win.destroy()
        self.ask_birthday_question()

    def ask_birthday_question(self):
        self.question_win = tk.Toplevel(self.root)
        self.question_win.attributes("-fullscreen", True)
        self.question_win.configure(bg="black")
        self.question_win.config(cursor="arrow")
        for seq in ["WM_DELETE_WINDOW", "<Alt-F4>", "<Escape>"]:
            self.question_win.bind_all(seq, self.disable_event)

        tk.Label(self.question_win, text="陳立洺生日幾號？", font=("Arial", 40), fg="white", bg="black").pack(pady=100)
        self.birthday_entry = tk.Entry(self.question_win, font=("Arial", 30), justify="center")
        self.birthday_entry.pack(pady=20)
        self.birthday_entry.focus()
        self.birthday_entry.bind("<Return>", self.check_birthday_answer)

        self.spawn_fake_windows(25)

    def check_birthday_answer(self, event):
        ans = self.birthday_entry.get()
        if ans == "1008":
            self.root.destroy()
        else:
            if hasattr(self, "question_win"):
                self.question_win.destroy()
            self.ask_first_question()

    def spawn_fake_windows(self, count):
        for _ in range(count):
            win = tk.Toplevel(self.root)
            win.overrideredirect(True)
            win.configure(bg="black")
            win.geometry(f"300x80+{random.randint(0,self.width-300)}+{random.randint(0,self.height-100)}")
            tk.Label(win, text="❌錯誤❌", font=("Arial", 20), fg="red", bg="black").pack(expand=True, fill="both")
            self.root.after(random.randint(500, 2000), win.destroy)

    def show_question_window(self, question, yes_command, no_command):
        self.question_win = tk.Toplevel(self.root)
        self.question_win.attributes("-fullscreen", True)
        self.question_win.configure(bg="black")
        self.question_win.config(cursor="arrow")
        for seq in ["WM_DELETE_WINDOW", "<Alt-F4>", "<Escape>"]:
            self.question_win.bind_all(seq, self.disable_event)

        question_label = tk.Label(self.question_win, text=question, font=("Arial", 40), fg="white", bg="black")
        question_label.pack(expand=True)

        btn_yes = tk.Button(self.question_win, text="是", font=("Arial", 30), command=yes_command)
        btn_yes.pack(side="left", expand=True, fill="both")

        btn_no = tk.Button(self.question_win, text="否", font=("Arial", 30), command=no_command)
        btn_no.pack(side="right", expand=True, fill="both")

    def show_big_red_message(self):
        if hasattr(self, "question_win"):
            self.question_win.destroy()

        self.big_msg_win = tk.Toplevel(self.root)
        self.big_msg_win.attributes("-fullscreen", True)
        self.big_msg_win.configure(bg="black")
        self.big_msg_win.config(cursor="none")
        self.big_msg_win.protocol("WM_DELETE_WINDOW", self.disable_event)
        self.big_msg_win.bind_all("<Alt-F4>", self.disable_event)
        self.big_msg_win.bind_all("<Escape>", self.disable_event)

        label = tk.Label(self.big_msg_win, text="那你別玩了", font=("Arial", 100, "bold"), fg="red", bg="black")
        label.pack(expand=True)

        self.big_msg_win.after(30000, self.return_to_first_question)

    def return_to_first_question(self):
        self.big_msg_win.destroy()
        self.ask_first_question()

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = PrankApp()
    app.run()